{% comment %}

Accepts:
  is_slide: boolean â€“ defines whether to add lazy-loading/slide list functionality.
  type: "video" | "image" | "video_background" | "image_background" block type
  settings: block settings object, usually media + content settings
  color_scheme
  overlay_color
  overlay_opacity

Usage:
  {% render 'media-slide' with color_scheme: section.props.color_scheme, overlay_opacity: section.props.overlay_opacity, overlay_color: section.props.overlay_color, props: block.settings, type: block.type, is_slide: is_slide %}
{% endcomment %}

<{% if is_slide %}li{% else %}div{% endif %} class="swiper-slide swiper-slide--{{ type }} color-{{ color_scheme | default: 'transparent-light' }} {{class}}" style="background-color: {{ overlay_color | default: '#000000' }}; --oc: {{ overlay_color | default: '#000000' }}; ">
{% if type == 'video' or type == 'image' and props.url != blank %}
<a href="{{ props.url }}" {% if props.target %} target="_blank" rel="nofollow noopener noreferrer"{% endif %}>
{%endif %}
{% if type contains 'video' %}
    <div class="background-video background-element" style="--oo: {{overlay_opacity }}; opacity: {{ 100 | minus: overlay_opacity | divided_by: 100.00 }}; --vbg-overlay-opacity: {{overlay_opacity | default: 0.4 }}; --vbg-bg: {{overlay_color | default: '#000000' }};">

      {% if props.video_type == 'external' %}
          {% render 'media' with type: 'video', video: props.youtube_url, poster: props.image, allow_unmute: props.allow_unmute , start_unmuted: props.start_unmuted %}
      {% else %}
        {% render 'media' with type: 'video', ratio: "16-9", class: 'media--mobile', video: props.video, allow_unmute: props.allow_unmute, start_unmuted: props.start_unmuted , video_small: props.video_small, poster: props.image, is_slide: is_slide %}
      {% endif %}
    </div>
    {%else %}
    <div class="background-image {% unless auto_height == true %} background-element {% endunless %}" style="--oo: {{ overlay_opacity }}; opacity: {{ 100 | minus: overlay_opacity | divided_by: 100.00 }};">
      {% if props.image_wide != blank %}
        {% render 'media' with type: 'image' , image: props.image_wide , size: "full" , class: 'media--wide', center_x: props.image_center_x, type: "image" , center_y: block.props.image_center_y , is_slide: is_slide %}
      {% endif %}
      {% if props.image_mobile != blank %}
        {% render 'media' with type: 'image' , image: props.image_mobile, size: "full" , class: 'media--mobile', center_x: props.image_center_x, type: "image" , center_y: props.image_center_y, is_slide: is_slide %}
      {% endif %}
      {% render 'media' with type: 'image' , image: props.image, size: "full", center_x: props.image_center_x, center_y: props.image_center_y, type: "image"  , is_slide: is_slide %}
    </div>
    {% endif %}
    {% if type == 'video' or type == 'image' and props.url != blank %}
      </a>
    {% endif %}
    {% if type == 'content-image' %}

      <div class="content-image-wrap style--{{props.content_image_spacing | default: 'overlapping' }}" style="opacity: {{props.content_image_opacity | divided_by: 100.00 | default: 1 }}; align-items: {{props.content_image_alignment | default: 'center' }}">
        {% if props.content_image_1 != blank %}
        <div class="content-image__1" style="flex-basis: {{props.image_1_basis | default: '150' }}px; {% if props.image_1_style %} {{props.image_1_style}} {% endif%}">
          {% render 'media' with type: 'image', image: props.content_image_1, size: 'large' %}
        </div>
        {% endif %}
        {% if props.content_image_2 != blank %}
        <div class="content-image__2" style="flex-basis: {{props.image_2_basis | default: '150' }}px; {% if props.image_2_style %} {{props.image_2_style}} {% endif%}">
          {% render 'media' with type: 'image', image: props.content_image_2, size: 'large' %}
        </div>
        {% endif %}
        {% if props.content_image_3 != blank %}
        <div class="content-image__3" style="flex-basis: {{props.image_3_basis | default: '150' }}px; {% if props.image_3_style %} {{props.image_3_style}} {% endif%}  ">
          {% render 'media' with type: 'image', image: props.content_image_3, size: 'large' %}
        </div>
        {% endif %}
      </div>
    {% endif %}
    {% if type != 'video' and type != 'image' %}
    <div class="banner__content" style="text-align: {{ props.text_alignment }}; align-items: {{ props.desktop_text_box_position }}; justify-content: {{ props.content_alignment }}; {% if props.desktop_text_box_position == 'flex-end' %} padding-bottom: clamp(1rem, calc(0.5rem + 1.5vw), 2.5rem); {% endif %}">
      <div class="banner__box color-{{ color_scheme }}"  data-slide-content>
        {% render 'slide-content' with props: props, block: block, type: type, is_small: is_static %}
      </div>
    </div>
    {% endif %}
</{% if is_slide %}li{% else %}div{% endif %}>